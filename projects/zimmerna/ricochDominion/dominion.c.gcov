        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:10
        -:    0:Programs:10
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 249539 returned 100% blocks executed 100%
   249539:    8:int compare(const void* a, const void* b)
   249539:    8-block  0
        -:    9:{
   249539:   10:  if (*(int*)a > *(int*)b)
   249539:   10-block  0
branch  0 taken 127078 (fallthrough)
branch  1 taken 122461
   127078:   11:    return 1;
   127078:   11-block  0
unconditional  0 taken 127078
   122461:   12:  if (*(int*)a < *(int*)b)
   122461:   12-block  0
branch  0 taken 121390 (fallthrough)
branch  1 taken 1071
   121390:   13:    return -1;
   121390:   13-block  0
unconditional  0 taken 121390
     1071:   14:  return 0;
     1071:   14-block  0
unconditional  0 taken 1071
        -:   15:}
        -:   16:
function newGame called 0 returned 0% blocks executed 0%
    #####:   17:struct gameState* newGame()
    $$$$$:   17-block  0
        -:   18:{
    #####:   19:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   20:  return g;
    $$$$$:   20-block  0
unconditional  0 never executed
        -:   21:}
        -:   22:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   23:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,int k8, int k9, int k10)
    $$$$$:   23-block  0
        -:   24:{
    #####:   25:  int* k = malloc(10 * sizeof(int));
    #####:   26:  k[0] = k1;
    #####:   27:  k[1] = k2;
    #####:   28:  k[2] = k3;
    #####:   29:  k[3] = k4;
    #####:   30:  k[4] = k5;
    #####:   31:  k[5] = k6;
    #####:   32:  k[6] = k7;
    #####:   33:  k[7] = k8;
    #####:   34:  k[8] = k9;
    #####:   35:  k[9] = k10;
    #####:   36:  return k;
    $$$$$:   36-block  0
unconditional  0 never executed
        -:   37:}
        -:   38:
function initializeGame called 44 returned 100% blocks executed 94%
       44:   39:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed, struct gameState *state)
       44:   39-block  0
        -:   40:{
        -:   41:
        -:   42:  int i;
        -:   43:  int j;
        -:   44:  int it;
        -:   45:  //set up random number generator
       44:   46:  SelectStream(1);
       44:   46-block  0
call    0 returned 44
       44:   47:  PutSeed((long)randomSeed);
call    0 returned 44
        -:   48:
        -:   49:  //check number of players
       44:   50:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 44 (fallthrough)
branch  1 taken 0
       44:   50-block  0
branch  2 taken 0 (fallthrough)
branch  3 taken 44
        -:   51:    {
    #####:   52:      return -1;
    $$$$$:   52-block  0
unconditional  0 never executed
        -:   53:    }
        -:   54:
        -:   55:  //set number of players
       44:   56:  state->numPlayers = numPlayers;
        -:   57:
        -:   58:  //check selected kingdom cards are different
      484:   59:  for (i = 0; i < 10; i++)
       44:   59-block  0
unconditional  0 taken 44
      440:   59-block  1
unconditional  1 taken 440
      484:   59-block  2
branch  2 taken 440
branch  3 taken 44 (fallthrough)
        -:   60:    {
     4840:   61:      for (j = 0; j < 10; j++)
      440:   61-block  0
unconditional  0 taken 440
     4400:   61-block  1
unconditional  1 taken 4400
     4840:   61-block  2
branch  2 taken 4400
branch  3 taken 440 (fallthrough)
        -:   62:        {
     4400:   63:	  if (j != i && kingdomCards[j] == kingdomCards[i])
     4400:   63-block  0
branch  0 taken 3960 (fallthrough)
branch  1 taken 440
     3960:   63-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 3960
        -:   64:	    {
    #####:   65:	      return -1;
    $$$$$:   65-block  0
unconditional  0 never executed
        -:   66:	    }
        -:   67:        }
        -:   68:    }
        -:   69:
        -:   70:
        -:   71:  //initialize supply
        -:   72:  ///////////////////////////////
        -:   73:
        -:   74:  //set number of Curse cards
       44:   75:  if (numPlayers == 2)
       44:   75-block  0
branch  0 taken 35 (fallthrough)
branch  1 taken 9
        -:   76:    {
       35:   77:      state->supplyCount[curse] = 10;
       35:   77-block  0
unconditional  0 taken 35
        -:   78:    }
        9:   79:  else if (numPlayers == 3)
        9:   79-block  0
branch  0 taken 9 (fallthrough)
branch  1 taken 0
        -:   80:    {
        9:   81:      state->supplyCount[curse] = 20;
        9:   81-block  0
unconditional  0 taken 9
        -:   82:    }
        -:   83:  else
        -:   84:    {
    #####:   85:      state->supplyCount[curse] = 30;
    $$$$$:   85-block  0
unconditional  0 never executed
        -:   86:    }
        -:   87:
        -:   88:  //set number of Victory cards
       44:   89:  if (numPlayers == 2)
       44:   89-block  0
branch  0 taken 35 (fallthrough)
branch  1 taken 9
        -:   90:    {
       35:   91:      state->supplyCount[estate] = 8;
       35:   92:      state->supplyCount[duchy] = 8;
       35:   93:      state->supplyCount[province] = 8;
       35:   93-block  0
unconditional  0 taken 35
        -:   94:    }
        -:   95:  else
        -:   96:    {
        9:   97:      state->supplyCount[estate] = 12;
        9:   98:      state->supplyCount[duchy] = 12;
        9:   99:      state->supplyCount[province] = 12;
        9:   99-block  0
unconditional  0 taken 9
        -:  100:    }
        -:  101:
        -:  102:  //set number of Treasure cards
       44:  103:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       44:  104:  state->supplyCount[silver] = 40;
       44:  105:  state->supplyCount[gold] = 30;
        -:  106:
        -:  107:  //set number of Kingdom cards
      924:  108:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
       44:  108-block  0
unconditional  0 taken 44
      880:  108-block  1
unconditional  1 taken 880
      924:  108-block  2
branch  2 taken 880
branch  3 taken 44 (fallthrough)
        -:  109:    {
     7260:  110:      for (j = 0; j < 10; j++)           		//loop chosen cards
      880:  110-block  0
unconditional  0 taken 880
     6380:  110-block  1
unconditional  1 taken 6380
     7260:  110-block  2
branch  2 taken 6820
branch  3 taken 440 (fallthrough)
        -:  111:	{
     6820:  112:	  if (kingdomCards[j] == i)
     6820:  112-block  0
branch  0 taken 440 (fallthrough)
branch  1 taken 6380
        -:  113:	    {
        -:  114:	      //check if card is a 'Victory' Kingdom card
      440:  115:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
      440:  115-block  0
branch  0 taken 396 (fallthrough)
branch  1 taken 44
      396:  115-block  1
branch  2 taken 44 (fallthrough)
branch  3 taken 352
        -:  116:		{
      176:  117:		  if (numPlayers == 2){
       88:  117-block  0
branch  0 taken 70 (fallthrough)
branch  1 taken 18
       88:  117-block  1
unconditional  2 taken 88
       70:  118:		    state->supplyCount[i] = 8;
       70:  118-block  0
unconditional  0 taken 70
        -:  119:		  }
       18:  120:		  else{ state->supplyCount[i] = 12; }
       18:  120-block  0
unconditional  0 taken 18
        -:  121:		}
        -:  122:	      else
        -:  123:		{
      352:  124:		  state->supplyCount[i] = 10;
      352:  124-block  0
unconditional  0 taken 352
        -:  125:		}
      440:  126:	      break;
      440:  126-block  0
unconditional  0 taken 440
        -:  127:	    }
        -:  128:	  else    //card is not in the set choosen for the game
        -:  129:	    {
     6380:  130:	      state->supplyCount[i] = -1;
        -:  131:	    }
        -:  132:	}
        -:  133:
        -:  134:    }
        -:  135:
        -:  136:  ////////////////////////
        -:  137:  //supply intilization complete
        -:  138:
        -:  139:  //set player decks
      141:  140:  for (i = 0; i < numPlayers; i++)
       44:  140-block  0
unconditional  0 taken 44
       97:  140-block  1
unconditional  1 taken 97
      141:  140-block  2
branch  2 taken 97
branch  3 taken 44 (fallthrough)
        -:  141:    {
       97:  142:      state->deckCount[i] = 0;
      388:  143:      for (j = 0; j < 3; j++)
       97:  143-block  0
unconditional  0 taken 97
      291:  143-block  1
unconditional  1 taken 291
      388:  143-block  2
branch  2 taken 291
branch  3 taken 97 (fallthrough)
        -:  144:	{
      291:  145:	  state->deck[i][j] = estate;
      291:  146:	  state->deckCount[i]++;
        -:  147:	}
      776:  148:      for (j = 3; j < 10; j++)
       97:  148-block  0
unconditional  0 taken 97
      679:  148-block  1
unconditional  1 taken 679
      776:  148-block  2
branch  2 taken 679
branch  3 taken 97 (fallthrough)
        -:  149:	{
      679:  150:	  state->deck[i][j] = copper;
      679:  151:	  state->deckCount[i]++;
        -:  152:	}
        -:  153:    }
        -:  154:
        -:  155:  //shuffle player decks
      141:  156:  for (i = 0; i < numPlayers; i++)
       44:  156-block  0
unconditional  0 taken 44
       97:  156-block  1
unconditional  1 taken 97
      141:  156-block  2
branch  2 taken 97
branch  3 taken 44 (fallthrough)
        -:  157:    {
       97:  158:      if ( shuffle(i, state) < 0 )
       97:  158-block  0
call    0 returned 97
branch  1 taken 0 (fallthrough)
branch  2 taken 97
        -:  159:	{
    #####:  160:	  return -1;
    $$$$$:  160-block  0
unconditional  0 never executed
        -:  161:	}
        -:  162:    }
        -:  163:
        -:  164:  //draw player hands
      141:  165:  for (i = 0; i < numPlayers; i++)
       44:  165-block  0
unconditional  0 taken 44
       97:  165-block  1
unconditional  1 taken 97
      141:  165-block  2
branch  2 taken 97
branch  3 taken 44 (fallthrough)
        -:  166:    {
        -:  167:      //initialize hand size to zero
       97:  168:      state->handCount[i] = 0;
       97:  169:      state->discardCount[i] = 0;
        -:  170:      //draw 5 cards
        -:  171:      // for (j = 0; j < 5; j++)
        -:  172:      //	{
        -:  173:      //	  drawCard(i, state);
        -:  174:      //	}
        -:  175:    }
        -:  176:
        -:  177:  //set embargo tokens to 0 for all supply piles
     1232:  178:  for (i = 0; i <= treasure_map; i++)
       44:  178-block  0
unconditional  0 taken 44
     1188:  178-block  1
unconditional  1 taken 1188
     1232:  178-block  2
branch  2 taken 1188
branch  3 taken 44 (fallthrough)
        -:  179:    {
     1188:  180:      state->embargoTokens[i] = 0;
        -:  181:    }
        -:  182:
        -:  183:  //initialize first player's turn
       44:  184:  state->outpostPlayed = 0;
       44:  185:  state->phase = 0;
       44:  186:  state->numActions = 1;
       44:  187:  state->numBuys = 1;
       44:  188:  state->playedCardCount = 0;
       44:  189:  state->whoseTurn = 0;
       44:  190:  state->handCount[state->whoseTurn] = 0;
        -:  191:  //int it; move to top
        -:  192:
        -:  193:  //Moved draw cards to here, only drawing at the start of a turn
      264:  194:  for (it = 0; it < 5; it++){
       44:  194-block  0
unconditional  0 taken 44
unconditional  1 taken 220
      264:  194-block  1
branch  2 taken 220
branch  3 taken 44 (fallthrough)
      220:  195:    drawCard(state->whoseTurn, state);
      220:  195-block  0
call    0 returned 220
        -:  196:  }
        -:  197:
       44:  198:  updateCoins(state->whoseTurn, state, 0);
       44:  198-block  0
call    0 returned 44
        -:  199:
       44:  200:  return 0;
unconditional  0 taken 44
        -:  201:}
        -:  202:
function shuffle called 239 returned 100% blocks executed 100%
      239:  203:int shuffle(int player, struct gameState *state)
      239:  203-block  0
        -:  204:{
        -:  205:
        -:  206:
        -:  207:  int newDeck[MAX_DECK];
      239:  208:  int newDeckPos = 0;
        -:  209:  int card;
        -:  210:  int i;
        -:  211:
      239:  212:  if (state->deckCount[player] < 1)
      239:  212-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 237
        2:  213:    return -1;
        2:  213-block  0
unconditional  0 taken 2
      237:  214:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
      237:  214-block  0
call    0 returned 237
        -:  215:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  216:
    36602:  217:  while (state->deckCount[player] > 0) {
unconditional  0 taken 237
    36602:  217-block  0
branch  1 taken 36365
branch  2 taken 237 (fallthrough)
    36365:  218:    card = floor(Random() * state->deckCount[player]);
    36365:  218-block  0
call    0 returned 36365
    36365:  219:    newDeck[newDeckPos] = state->deck[player][card];
    36365:  220:    newDeckPos++;
  3030269:  221:    for (i = card; i < state->deckCount[player]-1; i++) {
unconditional  0 taken 36365
  2993904:  221-block  0
unconditional  1 taken 2993904
  3030269:  221-block  1
branch  2 taken 2993904
branch  3 taken 36365 (fallthrough)
  2993904:  222:      state->deck[player][i] = state->deck[player][i+1];
        -:  223:    }
    36365:  224:    state->deckCount[player]--;
    36365:  224-block  0
unconditional  0 taken 36365
        -:  225:  }
    36602:  226:  for (i = 0; i < newDeckPos; i++) {
      237:  226-block  0
unconditional  0 taken 237
    36365:  226-block  1
unconditional  1 taken 36365
    36602:  226-block  2
branch  2 taken 36365
branch  3 taken 237 (fallthrough)
    36365:  227:    state->deck[player][i] = newDeck[i];
    36365:  228:    state->deckCount[player]++;
        -:  229:  }
        -:  230:
      239:  231:  return 0;
      237:  231-block  0
unconditional  0 taken 237
      239:  231-block  1
unconditional  1 taken 239
        -:  232:}
        -:  233:
function playCard called 0 returned 0% blocks executed 0%
    #####:  234:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
    $$$$$:  234-block  0
        -:  235:{
        -:  236:  int card;
    #####:  237:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  238:
        -:  239:  //check if it is the right phase
    #####:  240:  if (state->phase != 0)
    $$$$$:  240-block  0
branch  0 never executed
branch  1 never executed
        -:  241:    {
    #####:  242:      return -1;
    $$$$$:  242-block  0
unconditional  0 never executed
        -:  243:    }
        -:  244:
        -:  245:  //check if player has enough actions
    #####:  246:  if ( state->numActions < 1 )
    $$$$$:  246-block  0
branch  0 never executed
branch  1 never executed
        -:  247:    {
    #####:  248:      return -1;
    $$$$$:  248-block  0
unconditional  0 never executed
        -:  249:    }
        -:  250:
        -:  251:  //get card played
    #####:  252:  card = handCard(handPos, state);
    $$$$$:  252-block  0
call    0 never executed
        -:  253:
        -:  254:  //check if selected card is an action
    #####:  255:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
    $$$$$:  255-block  0
branch  2 never executed
branch  3 never executed
        -:  256:    {
    #####:  257:      return -1;
    $$$$$:  257-block  0
unconditional  0 never executed
        -:  258:    }
        -:  259:
        -:  260:  //play card
    #####:  261:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
    $$$$$:  261-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  262:    {
    #####:  263:      return -1;
    $$$$$:  263-block  0
unconditional  0 never executed
        -:  264:    }
        -:  265:
        -:  266:  //reduce number of actions
    #####:  267:  state->numActions--;
        -:  268:
        -:  269:  //update coins (Treasure cards may be added with card draws)
    #####:  270:  updateCoins(state->whoseTurn, state, coin_bonus);
    $$$$$:  270-block  0
call    0 never executed
        -:  271:
    #####:  272:  return 0;
unconditional  0 never executed
    $$$$$:  272-block  0
unconditional  1 never executed
        -:  273:}
        -:  274:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  275:int buyCard(int supplyPos, struct gameState *state)
    $$$$$:  275-block  0
    $$$$$:  275-block  1
unconditional  0 never executed
        -:  276:{
        -:  277:  int who;
        -:  278:  if (DEBUG){
        -:  279:    printf("Entering buyCard...\n");
        -:  280:  }
        -:  281:
        -:  282:  // I don't know what to do about the phase thing.
        -:  283:
    #####:  284:  who = state->whoseTurn;
        -:  285:
    #####:  286:  if (state->numBuys < 1){
    $$$$$:  286-block  0
branch  0 never executed
branch  1 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("You do not have any buys left\n");
    #####:  289:    return -1;
    $$$$$:  289-block  0
unconditional  0 never executed
    #####:  290:  } else if (supplyCount(supplyPos, state) <1){
    $$$$$:  290-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG)
        -:  292:      printf("There are not any of that type of card left\n");
    #####:  293:    return -1;
    $$$$$:  293-block  0
unconditional  0 never executed
    #####:  294:  } else if (state->coins < getCost(supplyPos)){
    $$$$$:  294-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  295:    if (DEBUG)
        -:  296:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  297:    return -1;
    $$$$$:  297-block  0
unconditional  0 never executed
        -:  298:  } else {
    #####:  299:    state->phase=1;
        -:  300:    //state->supplyCount[supplyPos]--;
    #####:  301:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
    $$$$$:  301-block  0
call    0 never executed
        -:  302:
    #####:  303:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  304:    state->numBuys--;
unconditional  0 never executed
        -:  305:    if (DEBUG)
        -:  306:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  307:  }
        -:  308:
        -:  309:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  310:  //state->discardCount[who]++;
        -:  311:
    #####:  312:  return 0;
    $$$$$:  312-block  0
unconditional  0 never executed
        -:  313:}
        -:  314:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  315:int numHandCards(struct gameState *state)
    $$$$$:  315-block  0
        -:  316:{
    #####:  317:  return state->handCount[ whoseTurn(state) ];
    $$$$$:  317-block  0
call    0 never executed
unconditional  1 never executed
        -:  318:}
        -:  319:
function handCard called 0 returned 0% blocks executed 0%
    #####:  320:int handCard(int handPos, struct gameState *state)
    $$$$$:  320-block  0
        -:  321:{
    #####:  322:  int currentPlayer = whoseTurn(state);
    $$$$$:  322-block  0
call    0 never executed
    #####:  323:  return state->hand[currentPlayer][handPos];
unconditional  0 never executed
        -:  324:}
        -:  325:
function supplyCount called 8 returned 100% blocks executed 100%
        8:  326:int supplyCount(int card, struct gameState *state)
        8:  326-block  0
        -:  327:{
        8:  328:  return state->supplyCount[card];
        8:  328-block  0
unconditional  0 taken 8
        -:  329:}
        -:  330:
function fullDeckCount called 8 returned 100% blocks executed 100%
        8:  331:int fullDeckCount(int player, int card, struct gameState *state)
        8:  331-block  0
        -:  332:{
        -:  333:  int i;
        8:  334:  int count = 0;
        -:  335:
       68:  336:  for (i = 0; i < state->deckCount[player]; i++)
        8:  336-block  0
unconditional  0 taken 8
       60:  336-block  1
unconditional  1 taken 60
       68:  336-block  2
branch  2 taken 60
branch  3 taken 8 (fallthrough)
        -:  337:    {
       60:  338:      if (state->deck[player][i] == card) count++;
       60:  338-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 58
        2:  338-block  1
unconditional  2 taken 2
        -:  339:    }
        -:  340:
       33:  341:  for (i = 0; i < state->handCount[player]; i++)
        8:  341-block  0
unconditional  0 taken 8
       25:  341-block  1
unconditional  1 taken 25
       33:  341-block  2
branch  2 taken 25
branch  3 taken 8 (fallthrough)
        -:  342:    {
       25:  343:      if (state->hand[player][i] == card) count++;
       25:  343-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 23
        2:  343-block  1
unconditional  2 taken 2
        -:  344:    }
        -:  345:
       18:  346:  for (i = 0; i < state->discardCount[player]; i++)
        8:  346-block  0
unconditional  0 taken 8
       10:  346-block  1
unconditional  1 taken 10
       18:  346-block  2
branch  2 taken 10
branch  3 taken 8 (fallthrough)
        -:  347:    {
       10:  348:      if (state->discard[player][i] == card) count++;
       10:  348-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 8
        2:  348-block  1
unconditional  2 taken 2
        -:  349:    }
        -:  350:
        8:  351:  return count;
        8:  351-block  0
unconditional  0 taken 8
        -:  352:}
        -:  353:
function whoseTurn called 20014 returned 100% blocks executed 100%
    20014:  354:int whoseTurn(struct gameState *state)
    20014:  354-block  0
        -:  355:{
    20014:  356:  return state->whoseTurn;
    20014:  356-block  0
unconditional  0 taken 20014
        -:  357:}
        -:  358:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  359:int endTurn(struct gameState *state)
    $$$$$:  359-block  0
        -:  360:{
        -:  361:  int k;
        -:  362:  int i;
    #####:  363:  int currentPlayer = whoseTurn(state);
    $$$$$:  363-block  0
call    0 never executed
        -:  364:
        -:  365:  //Discard hand
    #####:  366:  for (i = 0; i < state->handCount[currentPlayer]; i++){
unconditional  0 never executed
    $$$$$:  366-block  0
unconditional  1 never executed
    $$$$$:  366-block  1
branch  2 never executed
branch  3 never executed
    #####:  367:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  368:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  369:  }
    #####:  370:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  371:
        -:  372:  //Code for determining the player
    #####:  373:  if (currentPlayer < (state->numPlayers - 1)){
    $$$$$:  373-block  0
branch  0 never executed
branch  1 never executed
    #####:  374:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    $$$$$:  374-block  0
unconditional  0 never executed
        -:  375:  }
        -:  376:  else{
    #####:  377:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
    $$$$$:  377-block  0
unconditional  0 never executed
        -:  378:  }
        -:  379:
    #####:  380:  state->outpostPlayed = 0;
    #####:  381:  state->phase = 0;
    #####:  382:  state->numActions = 1;
    #####:  383:  state->coins = 0;
    #####:  384:  state->numBuys = 1;
    #####:  385:  state->playedCardCount = 0;
    #####:  386:  state->handCount[state->whoseTurn] = 0;
        -:  387:
        -:  388:  //int k; move to top
        -:  389:  //Next player draws hand
    #####:  390:  for (k = 0; k < 5; k++){
    $$$$$:  390-block  0
unconditional  0 never executed
unconditional  1 never executed
    $$$$$:  390-block  1
branch  2 never executed
branch  3 never executed
    #####:  391:    drawCard(state->whoseTurn, state);//Draw a card
    $$$$$:  391-block  0
call    0 never executed
        -:  392:  }
        -:  393:
        -:  394:  //Update money
    #####:  395:  updateCoins(state->whoseTurn, state , 0);
    $$$$$:  395-block  0
call    0 never executed
        -:  396:
    #####:  397:  return 0;
unconditional  0 never executed
        -:  398:}
        -:  399:
function isGameOver called 12 returned 100% blocks executed 100%
       12:  400:int isGameOver(struct gameState *state)
       12:  400-block  0
        -:  401:{
        -:  402:  int i;
        -:  403:  int j;
        -:  404:
        -:  405:  //if stack of Province cards is empty, the game ends
       12:  406:  if (state->supplyCount[province] == 0)
       12:  406-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 10
        -:  407:    {
        2:  408:      return 1;
        2:  408-block  0
unconditional  0 taken 2
        -:  409:    }
        -:  410:
        -:  411:  //if three supply pile are at 0, the game ends
       10:  412:  j = 0;
      260:  413:  for (i = 0; i < 25; i++)
       10:  413-block  0
unconditional  0 taken 10
      250:  413-block  1
unconditional  1 taken 250
      260:  413-block  2
branch  2 taken 250
branch  3 taken 10 (fallthrough)
        -:  414:    {
      250:  415:      if (state->supplyCount[i] == 0)
      250:  415-block  0
branch  0 taken 12 (fallthrough)
branch  1 taken 238
        -:  416:	{
       12:  417:	  j++;
       12:  417-block  0
unconditional  0 taken 12
        -:  418:	}
        -:  419:    }
       10:  420:  if ( j >= 3)
       10:  420-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 8
        -:  421:    {
        2:  422:      return 1;
        2:  422-block  0
unconditional  0 taken 2
        -:  423:    }
        -:  424:
        8:  425:  return 0;
        8:  425-block  0
unconditional  0 taken 8
        -:  426:}
        -:  427:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  428:int scoreFor (int player, struct gameState *state)
    $$$$$:  428-block  0
        -:  429:{
        -:  430:
        -:  431:  int i;
    #####:  432:  int score = 0;
        -:  433:  //score from hand
    #####:  434:  for (i = 0; i < state->handCount[player]; i++)
    $$$$$:  434-block  0
unconditional  0 never executed
    $$$$$:  434-block  1
unconditional  1 never executed
    $$$$$:  434-block  2
branch  2 never executed
branch  3 never executed
        -:  435:    {
    #####:  436:      if (state->hand[player][i] == curse) { score = score - 1; };
    $$$$$:  436-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  436-block  1
unconditional  2 never executed
    #####:  437:      if (state->hand[player][i] == estate) { score = score + 1; };
    $$$$$:  437-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  437-block  1
unconditional  2 never executed
    #####:  438:      if (state->hand[player][i] == duchy) { score = score + 3; };
    $$$$$:  438-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  438-block  1
unconditional  2 never executed
    #####:  439:      if (state->hand[player][i] == province) { score = score + 6; };
    $$$$$:  439-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  439-block  1
unconditional  2 never executed
    #####:  440:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    $$$$$:  440-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  440-block  1
unconditional  2 never executed
    #####:  441:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    $$$$$:  441-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  441-block  1
call    2 never executed
unconditional  3 never executed
        -:  442:    }
        -:  443:
        -:  444:  //score from discard
    #####:  445:  for (i = 0; i < state->discardCount[player]; i++)
    $$$$$:  445-block  0
unconditional  0 never executed
    $$$$$:  445-block  1
unconditional  1 never executed
    $$$$$:  445-block  2
branch  2 never executed
branch  3 never executed
        -:  446:    {
    #####:  447:      if (state->discard[player][i] == curse) { score = score - 1; };
    $$$$$:  447-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  447-block  1
unconditional  2 never executed
    #####:  448:      if (state->discard[player][i] == estate) { score = score + 1; };
    $$$$$:  448-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  448-block  1
unconditional  2 never executed
    #####:  449:      if (state->discard[player][i] == duchy) { score = score + 3; };
    $$$$$:  449-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  449-block  1
unconditional  2 never executed
    #####:  450:      if (state->discard[player][i] == province) { score = score + 6; };
    $$$$$:  450-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  450-block  1
unconditional  2 never executed
    #####:  451:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    $$$$$:  451-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  451-block  1
unconditional  2 never executed
    #####:  452:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    $$$$$:  452-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  452-block  1
call    2 never executed
unconditional  3 never executed
        -:  453:    }
        -:  454:
        -:  455:  //score from deck
    #####:  456:  for (i = 0; i < state->discardCount[player]; i++)
    $$$$$:  456-block  0
unconditional  0 never executed
    $$$$$:  456-block  1
unconditional  1 never executed
    $$$$$:  456-block  2
branch  2 never executed
branch  3 never executed
        -:  457:    {
    #####:  458:      if (state->deck[player][i] == curse) { score = score - 1; };
    $$$$$:  458-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  458-block  1
unconditional  2 never executed
    #####:  459:      if (state->deck[player][i] == estate) { score = score + 1; };
    $$$$$:  459-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  459-block  1
unconditional  2 never executed
    #####:  460:      if (state->deck[player][i] == duchy) { score = score + 3; };
    $$$$$:  460-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  460-block  1
unconditional  2 never executed
    #####:  461:      if (state->deck[player][i] == province) { score = score + 6; };
    $$$$$:  461-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  461-block  1
unconditional  2 never executed
    #####:  462:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    $$$$$:  462-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  462-block  1
unconditional  2 never executed
    #####:  463:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    $$$$$:  463-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  463-block  1
call    2 never executed
unconditional  3 never executed
        -:  464:    }
        -:  465:
    #####:  466:  return score;
    $$$$$:  466-block  0
unconditional  0 never executed
        -:  467:}
        -:  468:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  469:int getWinners(int players[MAX_PLAYERS], struct gameState *state)
    $$$$$:  469-block  0
        -:  470:{
        -:  471:  int i;
        -:  472:  int j;
        -:  473:  int highScore;
        -:  474:  int currentPlayer;
        -:  475:
        -:  476:  //get score for each player
    #####:  477:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  477-block  0
unconditional  0 never executed
    $$$$$:  477-block  1
unconditional  1 never executed
    $$$$$:  477-block  2
branch  2 never executed
branch  3 never executed
        -:  478:    {
        -:  479:      //set unused player scores to -9999
    #####:  480:      if (i >= state->numPlayers)
    $$$$$:  480-block  0
branch  0 never executed
branch  1 never executed
        -:  481:	{
    #####:  482:	  players[i] = -9999;
    $$$$$:  482-block  0
unconditional  0 never executed
        -:  483:	}
        -:  484:      else
        -:  485:	{
    #####:  486:	  players[i] = scoreFor (i, state);
    $$$$$:  486-block  0
call    0 never executed
unconditional  1 never executed
        -:  487:	}
        -:  488:    }
        -:  489:
        -:  490:  //find highest score
    #####:  491:  j = 0;
    #####:  492:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  492-block  0
unconditional  0 never executed
    $$$$$:  492-block  1
unconditional  1 never executed
    $$$$$:  492-block  2
branch  2 never executed
branch  3 never executed
        -:  493:    {
    #####:  494:      if (players[i] > players[j])
    $$$$$:  494-block  0
branch  0 never executed
branch  1 never executed
        -:  495:	{
    #####:  496:	  j = i;
    $$$$$:  496-block  0
unconditional  0 never executed
        -:  497:	}
        -:  498:    }
    #####:  499:  highScore = players[j];
        -:  500:
        -:  501:  //add 1 to players who had less turns
    #####:  502:  currentPlayer = whoseTurn(state);
    $$$$$:  502-block  0
call    0 never executed
    #####:  503:  for (i = 0; i < MAX_PLAYERS; i++)
unconditional  0 never executed
    $$$$$:  503-block  0
unconditional  1 never executed
    $$$$$:  503-block  1
branch  2 never executed
branch  3 never executed
        -:  504:    {
    #####:  505:      if ( players[i] == highScore && i > currentPlayer )
    $$$$$:  505-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  505-block  1
branch  2 never executed
branch  3 never executed
        -:  506:	{
    #####:  507:	  players[i]++;
    $$$$$:  507-block  0
unconditional  0 never executed
        -:  508:	}
        -:  509:    }
        -:  510:
        -:  511:  //find new highest score
    #####:  512:  j = 0;
    #####:  513:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  513-block  0
unconditional  0 never executed
    $$$$$:  513-block  1
unconditional  1 never executed
    $$$$$:  513-block  2
branch  2 never executed
branch  3 never executed
        -:  514:    {
    #####:  515:      if ( players[i] > players[j] )
    $$$$$:  515-block  0
branch  0 never executed
branch  1 never executed
        -:  516:	{
    #####:  517:	  j = i;
    $$$$$:  517-block  0
unconditional  0 never executed
        -:  518:	}
        -:  519:    }
    #####:  520:  highScore = players[j];
        -:  521:
        -:  522:  //set winners in array to 1 and rest to 0
    #####:  523:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  523-block  0
unconditional  0 never executed
    $$$$$:  523-block  1
unconditional  1 never executed
    $$$$$:  523-block  2
branch  2 never executed
branch  3 never executed
        -:  524:    {
    #####:  525:      if ( players[i] == highScore )
    $$$$$:  525-block  0
branch  0 never executed
branch  1 never executed
        -:  526:	{
    #####:  527:	  players[i] = 1;
    $$$$$:  527-block  0
unconditional  0 never executed
        -:  528:	}
        -:  529:      else
        -:  530:	{
    #####:  531:	  players[i] = 0;
    $$$$$:  531-block  0
unconditional  0 never executed
        -:  532:	}
        -:  533:    }
        -:  534:
    #####:  535:  return 0;
    $$$$$:  535-block  0
unconditional  0 never executed
        -:  536:}
        -:  537:
function drawCard called 282694 returned 100% blocks executed 100%
   282694:  538:int drawCard(int player, struct gameState *state)
   282694:  538-block  0
        -:  539:{
        -:  540:  int count;
        -:  541:  int deckCounter;
   282694:  542:  if (state->deckCount[player] <= 0){//Deck is empty
   282694:  542-block  0
branch  0 taken 141 (fallthrough)
branch  1 taken 282553
        -:  543:
        -:  544:    //Step 1 Shuffle the discard pile back into a deck
        -:  545:    int i;
        -:  546:    //Move discard to deck
    35536:  547:    for (i = 0; i < state->discardCount[player];i++){
      141:  547-block  0
unconditional  0 taken 141
    35395:  547-block  1
unconditional  1 taken 35395
    35536:  547-block  2
branch  2 taken 35395
branch  3 taken 141 (fallthrough)
    35395:  548:      state->deck[player][i] = state->discard[player][i];
    35395:  549:      state->discard[player][i] = -1;
        -:  550:    }
        -:  551:
      141:  552:    state->deckCount[player] = state->discardCount[player];
      141:  553:    state->discardCount[player] = 0;//Reset discard
        -:  554:
        -:  555:    //Shufffle the deck
      141:  556:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
      141:  556-block  0
call    0 returned 141
        -:  557:
        -:  558:    if (DEBUG){//Debug statements
        -:  559:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  560:    }
        -:  561:
      141:  562:    state->discardCount[player] = 0;
        -:  563:
        -:  564:    //Step 2 Draw Card
      141:  565:    count = state->handCount[player];//Get current player's hand count
unconditional  0 taken 141
        -:  566:
        -:  567:    if (DEBUG){//Debug statements
        -:  568:      printf("Current hand count: %d\n", count);
        -:  569:    }
        -:  570:
      141:  571:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  572:
      141:  573:    if (deckCounter == 0)
      141:  573-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 140
        1:  574:      return -1;
        1:  574-block  0
unconditional  0 taken 1
        -:  575:
      140:  576:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
      140:  577:    state->deckCount[player]--;
      140:  578:    state->handCount[player]++;//Increment hand count
      140:  578-block  0
unconditional  0 taken 140
        -:  579:  }
        -:  580:
        -:  581:  else{
   282553:  582:    int count = state->handCount[player];//Get current hand count for player
   282553:  582-block  0
unconditional  0 taken 282553
        -:  583:    int deckCounter;
        -:  584:    if (DEBUG){//Debug statements
        -:  585:      printf("Current hand count: %d\n", count);
        -:  586:    }
        -:  587:
   282553:  588:    deckCounter = state->deckCount[player];//Create holder for the deck count
   282553:  589:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
   282553:  590:    state->deckCount[player]--;
   282553:  591:    state->handCount[player]++;//Increment hand count
   282553:  591-block  0
unconditional  0 taken 282553
        -:  592:  }
        -:  593:
   282693:  594:  return 0;
   282693:  594-block  0
unconditional  0 taken 282693
        -:  595:}
        -:  596:
function getCost called 10 returned 100% blocks executed 23%
       10:  597:int getCost(int cardNumber)
       10:  597-block  0
        -:  598:{
       10:  599:  switch( cardNumber )
       10:  599-block  0
branch  0 taken 0
branch  1 taken 1
branch  2 taken 0
branch  3 taken 0
branch  4 taken 5
branch  5 taken 2
branch  6 taken 1
branch  7 taken 1
branch  8 taken 0
branch  9 taken 0
branch 10 taken 0
branch 11 taken 0
branch 12 taken 0
branch 13 taken 0
branch 14 taken 0
branch 15 taken 0
branch 16 taken 0
branch 17 taken 0
branch 18 taken 0
branch 19 taken 0
branch 20 taken 0
branch 21 taken 0
branch 22 taken 0
branch 23 taken 0
branch 24 taken 0
branch 25 taken 0
branch 26 taken 0
branch 27 taken 0
        -:  600:    {
        -:  601:    case curse:
    #####:  602:      return 0;
    $$$$$:  602-block  0
unconditional  0 never executed
        -:  603:    case estate:
        1:  604:      return 2;
        1:  604-block  0
unconditional  0 taken 1
        -:  605:    case duchy:
    #####:  606:      return 5;
    $$$$$:  606-block  0
unconditional  0 never executed
        -:  607:    case province:
    #####:  608:      return 8;
    $$$$$:  608-block  0
unconditional  0 never executed
        -:  609:    case copper:
        5:  610:      return 0;
        5:  610-block  0
unconditional  0 taken 5
        -:  611:    case silver:
        2:  612:      return 3;
        2:  612-block  0
unconditional  0 taken 2
        -:  613:    case gold:
        1:  614:      return 6;
        1:  614-block  0
unconditional  0 taken 1
        -:  615:    case adventurer:
        1:  616:      return 6;
        1:  616-block  0
unconditional  0 taken 1
        -:  617:    case council_room:
    #####:  618:      return 5;
    $$$$$:  618-block  0
unconditional  0 never executed
        -:  619:    case feast:
    #####:  620:      return 4;
    $$$$$:  620-block  0
unconditional  0 never executed
        -:  621:    case gardens:
    #####:  622:      return 4;
    $$$$$:  622-block  0
unconditional  0 never executed
        -:  623:    case mine:
    #####:  624:      return 5;
    $$$$$:  624-block  0
unconditional  0 never executed
        -:  625:    case remodel:
    #####:  626:      return 4;
    $$$$$:  626-block  0
unconditional  0 never executed
        -:  627:    case smithy:
    #####:  628:      return 4;
    $$$$$:  628-block  0
unconditional  0 never executed
        -:  629:    case village:
    #####:  630:      return 3;
    $$$$$:  630-block  0
unconditional  0 never executed
        -:  631:    case baron:
    #####:  632:      return 4;
    $$$$$:  632-block  0
unconditional  0 never executed
        -:  633:    case great_hall:
    #####:  634:      return 3;
    $$$$$:  634-block  0
unconditional  0 never executed
        -:  635:    case minion:
    #####:  636:      return 5;
    $$$$$:  636-block  0
unconditional  0 never executed
        -:  637:    case steward:
    #####:  638:      return 3;
    $$$$$:  638-block  0
unconditional  0 never executed
        -:  639:    case tribute:
    #####:  640:      return 5;
    $$$$$:  640-block  0
unconditional  0 never executed
        -:  641:    case ambassador:
    #####:  642:      return 3;
    $$$$$:  642-block  0
unconditional  0 never executed
        -:  643:    case cutpurse:
    #####:  644:      return 4;
    $$$$$:  644-block  0
unconditional  0 never executed
        -:  645:    case embargo:
    #####:  646:      return 2;
    $$$$$:  646-block  0
unconditional  0 never executed
        -:  647:    case outpost:
    #####:  648:      return 5;
    $$$$$:  648-block  0
unconditional  0 never executed
        -:  649:    case salvager:
    #####:  650:      return 4;
    $$$$$:  650-block  0
unconditional  0 never executed
        -:  651:    case sea_hag:
    #####:  652:      return 4;
    $$$$$:  652-block  0
unconditional  0 never executed
        -:  653:    case treasure_map:
    #####:  654:      return 4;
    $$$$$:  654-block  0
unconditional  0 never executed
        -:  655:    }
        -:  656:
    #####:  657:  return -1;
    $$$$$:  657-block  0
unconditional  0 never executed
        -:  658:}
        -:  659:
function cardEffect called 20014 returned 100% blocks executed 13%
    20014:  660:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
    20014:  660-block  0
        -:  661:{
        -:  662:  int i;
        -:  663:  int j;
        -:  664:  int k;
        -:  665:  int x;
        -:  666:  int index;
    20014:  667:  int currentPlayer = whoseTurn(state);
    20014:  667-block  0
call    0 returned 20014
    20014:  668:  int nextPlayer = currentPlayer + 1;
        -:  669:
    20014:  670:  int tributeRevealedCards[2] = {-1, -1};
        -:  671:  int temphand[MAX_HAND];// moved above the if statement
    20014:  672:  int drawnTreasure = 0;
        -:  673:  int cardDrawn;
    20014:  674:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 8328 (fallthrough)
branch  1 taken 11686
     8328:  675:    nextPlayer = 0;
     8328:  675-block  0
unconditional  0 taken 8328
        -:  676:  }
        -:  677:
        -:  678:
        -:  679:  //uses switch to select card and perform actions
    20014:  680:  switch( card )
    20014:  680-block  0
branch  0 taken 10003
branch  1 taken 0
branch  2 taken 0
branch  3 taken 0
branch  4 taken 9
branch  5 taken 0
branch  6 taken 10001
branch  7 taken 1
branch  8 taken 0
branch  9 taken 0
branch 10 taken 0
branch 11 taken 0
branch 12 taken 0
branch 13 taken 0
branch 14 taken 0
branch 15 taken 0
branch 16 taken 0
branch 17 taken 0
branch 18 taken 0
branch 19 taken 0
branch 20 taken 0
        -:  681:    {
        -:  682:    case adventurer:
    10003:  683:      adventurerEffect(currentPlayer, state, cardDrawn, drawnTreasure, temphand);
    10003:  683-block  0
call    0 returned 10003
    10003:  684:      return 0;
unconditional  0 taken 10003
        -:  685:
        -:  686:    case council_room:
        -:  687:      //+4 Cards
    #####:  688:      for (i = 0; i < 4; i++)
    $$$$$:  688-block  0
unconditional  0 never executed
unconditional  1 never executed
    $$$$$:  688-block  1
branch  2 never executed
branch  3 never executed
        -:  689:	{
    #####:  690:	  drawCard(currentPlayer, state);
    $$$$$:  690-block  0
call    0 never executed
        -:  691:	}
        -:  692:
        -:  693:      //+1 Buy
    #####:  694:      state->numBuys++;
        -:  695:
        -:  696:      //Each other player draws a card
    #####:  697:      for (i = 0; i < state->numPlayers; i++)
    $$$$$:  697-block  0
unconditional  0 never executed
    $$$$$:  697-block  1
unconditional  1 never executed
    $$$$$:  697-block  2
branch  2 never executed
branch  3 never executed
        -:  698:	{
    #####:  699:	  if ( i != currentPlayer )
    $$$$$:  699-block  0
branch  0 never executed
branch  1 never executed
        -:  700:	    {
    #####:  701:	      drawCard(i, state);
    $$$$$:  701-block  0
call    0 never executed
unconditional  1 never executed
        -:  702:	    }
        -:  703:	}
        -:  704:
        -:  705:      //put played card in played card pile
    #####:  706:      discardCard(handPos, currentPlayer, state, 0);
    $$$$$:  706-block  0
call    0 never executed
        -:  707:
    #####:  708:      return 0;
unconditional  0 never executed
        -:  709:
        -:  710:    case feast:
        -:  711:      //gain card with cost up to 5
        -:  712:      //Backup hand
    #####:  713:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    $$$$$:  713-block  0
unconditional  0 never executed
    $$$$$:  713-block  1
unconditional  1 never executed
    $$$$$:  713-block  2
branch  2 never executed
branch  3 never executed
    #####:  714:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  715:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  716:      }
        -:  717:      //Backup hand
        -:  718:
        -:  719:      //Update Coins for Buy
    #####:  720:      updateCoins(currentPlayer, state, 5);
    $$$$$:  720-block  0
call    0 never executed
    #####:  721:      x = 1;//Condition to loop on
    #####:  722:      while( x == 1) {//Buy one card
unconditional  0 never executed
    $$$$$:  722-block  0
branch  1 never executed
branch  2 never executed
    #####:  723:	if (supplyCount(choice1, state) <= 0){
    $$$$$:  723-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  724:	  if (DEBUG)
        -:  725:	    printf("None of that card left, sorry!\n");
        -:  726:
        -:  727:	  if (DEBUG){
        -:  728:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  729:	  }
        -:  730:	}
    #####:  731:	else if (state->coins < getCost(choice1)){
    $$$$$:  731-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  732:	  printf("That card is too expensive!\n");
    $$$$$:  732-block  0
call    0 never executed
unconditional  1 never executed
        -:  733:
        -:  734:	  if (DEBUG){
        -:  735:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  736:	  }
        -:  737:	}
        -:  738:	else{
        -:  739:
        -:  740:	  if (DEBUG){
        -:  741:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  742:	  }
        -:  743:
    #####:  744:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    $$$$$:  744-block  0
call    0 never executed
    #####:  745:	  x = 0;//No more buying cards
unconditional  0 never executed
        -:  746:
        -:  747:	  if (DEBUG){
        -:  748:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  749:	  }
        -:  750:
        -:  751:	}
        -:  752:      }
        -:  753:
        -:  754:      //Reset Hand
    #####:  755:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    $$$$$:  755-block  0
unconditional  0 never executed
    $$$$$:  755-block  1
unconditional  1 never executed
    $$$$$:  755-block  2
branch  2 never executed
branch  3 never executed
    #####:  756:	state->hand[currentPlayer][i] = temphand[i];
    #####:  757:	temphand[i] = -1;
        -:  758:      }
        -:  759:      //Reset Hand
        -:  760:
    #####:  761:      return 0;
    $$$$$:  761-block  0
unconditional  0 never executed
        -:  762:
        -:  763:    case gardens:
    #####:  764:      return gardensEffect();
    $$$$$:  764-block  0
call    0 never executed
unconditional  1 never executed
        -:  765:
        -:  766:    case mine:
        9:  767:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  768:
        9:  769:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        9:  769-block  0
branch  0 taken 8 (fallthrough)
branch  1 taken 1
        8:  769-block  1
branch  2 taken 1 (fallthrough)
branch  3 taken 7
        -:  770:	{
        2:  771:	  return -1;
        2:  771-block  0
unconditional  0 taken 2
        -:  772:	}
        -:  773:
        7:  774:      if (choice2 > treasure_map || choice2 < curse)
        7:  774-block  0
branch  0 taken 7 (fallthrough)
branch  1 taken 0
        7:  774-block  1
branch  2 taken 2 (fallthrough)
branch  3 taken 5
        -:  775:	{
        2:  776:	  return -1;
        2:  776-block  0
unconditional  0 taken 2
        -:  777:	}
        -:  778:
        5:  779:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        5:  779-block  0
call    0 returned 5
call    1 returned 5
branch  2 taken 1 (fallthrough)
branch  3 taken 4
        -:  780:	{
        1:  781:	  return -1;
        1:  781-block  0
unconditional  0 taken 1
        -:  782:	}
        -:  783:
        4:  784:      gainCard(choice2, state, 2, currentPlayer);
        4:  784-block  0
call    0 returned 4
        -:  785:
        -:  786:      //discard card from hand
        4:  787:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 4
        -:  788:
        -:  789:      //discard trashed card
        4:  790:      for (i = 0; i < state->handCount[currentPlayer]; i++)
unconditional  0 taken 4
    $$$$$:  790-block  0
unconditional  1 never executed
        4:  790-block  1
branch  2 taken 4
branch  3 taken 0 (fallthrough)
        -:  791:	{
        4:  792:	  if (state->hand[currentPlayer][i] == j)
        4:  792-block  0
branch  0 taken 4 (fallthrough)
branch  1 taken 0
        -:  793:	    {
        4:  794:	      discardCard(i, currentPlayer, state, 0);
        4:  794-block  0
call    0 returned 4
        4:  795:	      break;
unconditional  0 taken 4
        -:  796:	    }
        -:  797:	}
        -:  798:
        4:  799:      return 0;
        4:  799-block  0
unconditional  0 taken 4
        -:  800:
        -:  801:    case remodel:
    #####:  802:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  803:
    #####:  804:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
    $$$$$:  804-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  805:	{
    #####:  806:	  return -1;
    $$$$$:  806-block  0
unconditional  0 never executed
        -:  807:	}
        -:  808:
    #####:  809:      gainCard(choice2, state, 0, currentPlayer);
    $$$$$:  809-block  0
call    0 never executed
        -:  810:
        -:  811:      //discard card from hand
    #####:  812:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  813:
        -:  814:      //discard trashed card
    #####:  815:      for (i = 0; i < state->handCount[currentPlayer]; i++)
unconditional  0 never executed
    $$$$$:  815-block  0
unconditional  1 never executed
    $$$$$:  815-block  1
branch  2 never executed
branch  3 never executed
        -:  816:    	{
    #####:  817:    	  if (state->hand[currentPlayer][i] == j)
    $$$$$:  817-block  0
branch  0 never executed
branch  1 never executed
        -:  818:    	    {
    #####:  819:    	      discardCard(i, currentPlayer, state, 0);
    $$$$$:  819-block  0
call    0 never executed
    #####:  820:    	      break;
unconditional  0 never executed
        -:  821:    	    }
        -:  822:    	}
        -:  823:
    #####:  824:      return 0;
    $$$$$:  824-block  0
unconditional  0 never executed
        -:  825:
        -:  826:    case smithy:
    10001:  827:      smithyEffect(currentPlayer, state, handPos);
    10001:  827-block  0
call    0 returned 10001
    10001:  828:      return 0;
unconditional  0 taken 10001
        -:  829:
        -:  830:    case village:
        -:  831:      //+1 Card
        1:  832:      drawCard(currentPlayer, state);
        1:  832-block  0
call    0 returned 1
        -:  833:
        -:  834:      //+2 Actions
        1:  835:      state->numActions = state->numActions + 2;
        -:  836:
        -:  837:      //discard played card from hand
        1:  838:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 1
        1:  839:      return 0;
unconditional  0 taken 1
        -:  840:
        -:  841:    case baron:
    #####:  842:      state->numBuys++;//Increase buys by 1!
    #####:  843:      if (choice1 > 0){//Boolean true or going to discard an estate
    $$$$$:  843-block  0
branch  0 never executed
branch  1 never executed
    #####:  844:	int p = 0;//Iterator for hand!
    #####:  845:	int card_not_discarded = 1;//Flag for discard set!
    #####:  846:	while(card_not_discarded){
    $$$$$:  846-block  0
unconditional  0 never executed
    $$$$$:  846-block  1
branch  1 never executed
branch  2 never executed
    $$$$$:  846-block  2
unconditional  3 never executed
    #####:  847:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    $$$$$:  847-block  0
branch  0 never executed
branch  1 never executed
    #####:  848:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  849:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  850:	    state->discardCount[currentPlayer]++;
    #####:  851:	    for (;p < state->handCount[currentPlayer]; p++){
    $$$$$:  851-block  0
unconditional  0 never executed
    $$$$$:  851-block  1
unconditional  1 never executed
    $$$$$:  851-block  2
branch  2 never executed
branch  3 never executed
    #####:  852:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  853:	    }
    #####:  854:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  855:	    state->handCount[currentPlayer]--;
    #####:  856:	    card_not_discarded = 0;//Exit the loop
    $$$$$:  856-block  0
unconditional  0 never executed
        -:  857:	  }
    #####:  858:	  else if (p > state->handCount[currentPlayer]){
    $$$$$:  858-block  0
branch  0 never executed
branch  1 never executed
        -:  859:	    if(DEBUG) {
        -:  860:	      printf("No estate cards in your hand, invalid choice\n");
        -:  861:	      printf("Must gain an estate if there are any\n");
        -:  862:	    }
    #####:  863:	    if (supplyCount(estate, state) > 0){
    $$$$$:  863-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  864:	      gainCard(estate, state, 0, currentPlayer);
    $$$$$:  864-block  0
call    0 never executed
    #####:  865:	      state->supplyCount[estate]--;//Decrement estates
    #####:  866:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  867:		isGameOver(state);
    $$$$$:  867-block  0
call    0 never executed
unconditional  1 never executed
        -:  868:	      }
        -:  869:	    }
    #####:  870:	    card_not_discarded = 0;//Exit the loop
    $$$$$:  870-block  0
unconditional  0 never executed
        -:  871:	  }
        -:  872:
        -:  873:	  else{
    #####:  874:	    p++;//Next card
    $$$$$:  874-block  0
unconditional  0 never executed
        -:  875:	  }
        -:  876:	}
        -:  877:      }
        -:  878:
        -:  879:      else{
    #####:  880:	if (supplyCount(estate, state) > 0){
    $$$$$:  880-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  881:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    $$$$$:  881-block  0
call    0 never executed
    #####:  882:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  883:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  884:	    isGameOver(state);
    $$$$$:  884-block  0
call    0 never executed
unconditional  1 never executed
        -:  885:	  }
        -:  886:	}
        -:  887:      }
        -:  888:
        -:  889:
    #####:  890:      return 0;
    $$$$$:  890-block  0
unconditional  0 never executed
        -:  891:
        -:  892:    case great_hall:
        -:  893:      //+1 Card
    #####:  894:      drawCard(currentPlayer, state);
    $$$$$:  894-block  0
call    0 never executed
        -:  895:
        -:  896:      //+1 Actions
    #####:  897:      state->numActions++;
        -:  898:
        -:  899:      //discard card from hand
    #####:  900:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  901:      return 0;
unconditional  0 never executed
        -:  902:
        -:  903:    case minion:
        -:  904:      //+1 action
    #####:  905:      state->numActions++;
        -:  906:
        -:  907:      //discard card from hand
    #####:  908:      discardCard(handPos, currentPlayer, state, 0);
    $$$$$:  908-block  0
call    0 never executed
        -:  909:
    #####:  910:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  911:	{
    #####:  912:	  state->coins = state->coins + 2;
    $$$$$:  912-block  0
unconditional  0 never executed
        -:  913:	}
        -:  914:
    #####:  915:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
    $$$$$:  915-block  0
branch  0 never executed
branch  1 never executed
        -:  916:	{
        -:  917:	  //discard hand
    #####:  918:	  while(numHandCards(state) > 0)
    $$$$$:  918-block  0
unconditional  0 never executed
    $$$$$:  918-block  1
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  919:	    {
    #####:  920:	      discardCard(handPos, currentPlayer, state, 0);
    $$$$$:  920-block  0
call    0 never executed
unconditional  1 never executed
        -:  921:	    }
        -:  922:
        -:  923:	  //draw 4
    #####:  924:	  for (i = 0; i < 4; i++)
    $$$$$:  924-block  0
unconditional  0 never executed
unconditional  1 never executed
    $$$$$:  924-block  1
branch  2 never executed
branch  3 never executed
        -:  925:	    {
    #####:  926:	      drawCard(currentPlayer, state);
    $$$$$:  926-block  0
call    0 never executed
        -:  927:	    }
        -:  928:
        -:  929:	  //other players discard hand and redraw if hand size > 4
    #####:  930:	  for (i = 0; i < state->numPlayers; i++)
    $$$$$:  930-block  0
unconditional  0 never executed
    $$$$$:  930-block  1
unconditional  1 never executed
    $$$$$:  930-block  2
branch  2 never executed
branch  3 never executed
        -:  931:	    {
    #####:  932:	      if (i != currentPlayer)
    $$$$$:  932-block  0
branch  0 never executed
branch  1 never executed
        -:  933:		{
    #####:  934:		  if ( state->handCount[i] > 4 )
    $$$$$:  934-block  0
branch  0 never executed
branch  1 never executed
        -:  935:		    {
        -:  936:		      //discard hand
    #####:  937:		      while( state->handCount[i] > 0 )
    $$$$$:  937-block  0
unconditional  0 never executed
    $$$$$:  937-block  1
branch  1 never executed
branch  2 never executed
        -:  938:			{
    #####:  939:			  discardCard(handPos, i, state, 0);
    $$$$$:  939-block  0
call    0 never executed
unconditional  1 never executed
        -:  940:			}
        -:  941:
        -:  942:		      //draw 4
    #####:  943:		      for (j = 0; j < 4; j++)
    $$$$$:  943-block  0
unconditional  0 never executed
unconditional  1 never executed
    $$$$$:  943-block  1
branch  2 never executed
branch  3 never executed
        -:  944:			{
    #####:  945:			  drawCard(i, state);
    $$$$$:  945-block  0
call    0 never executed
        -:  946:			}
        -:  947:		    }
        -:  948:		}
        -:  949:	    }
        -:  950:
        -:  951:	}
    #####:  952:      return 0;
    $$$$$:  952-block  0
unconditional  0 never executed
        -:  953:
        -:  954:    case steward:
    #####:  955:      if (choice1 == 1)
    $$$$$:  955-block  0
branch  0 never executed
branch  1 never executed
        -:  956:	{
        -:  957:	  //+2 cards
    #####:  958:	  drawCard(currentPlayer, state);
    $$$$$:  958-block  0
call    0 never executed
    #####:  959:	  drawCard(currentPlayer, state);
call    0 never executed
unconditional  1 never executed
        -:  960:	}
    #####:  961:      else if (choice1 == 2)
    $$$$$:  961-block  0
branch  0 never executed
branch  1 never executed
        -:  962:	{
        -:  963:	  //+2 coins
    #####:  964:	  state->coins = state->coins + 2;
    $$$$$:  964-block  0
unconditional  0 never executed
        -:  965:	}
        -:  966:      else
        -:  967:	{
        -:  968:	  //trash 2 cards in hand
    #####:  969:	  discardCard(choice2, currentPlayer, state, 1);
    $$$$$:  969-block  0
call    0 never executed
    #####:  970:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
unconditional  1 never executed
        -:  971:	}
        -:  972:
        -:  973:      //discard card from hand
    #####:  974:      discardCard(handPos, currentPlayer, state, 0);
    $$$$$:  974-block  0
call    0 never executed
    #####:  975:      return 0;
unconditional  0 never executed
        -:  976:
        -:  977:    case tribute:
    #####:  978:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    $$$$$:  978-block  0
branch  0 never executed
branch  1 never executed
    #####:  979:	if (state->deckCount[nextPlayer] > 0){
    $$$$$:  979-block  0
branch  0 never executed
branch  1 never executed
    #####:  980:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  981:	  state->deckCount[nextPlayer]--;
    $$$$$:  981-block  0
unconditional  0 never executed
        -:  982:	}
    #####:  983:	else if (state->discardCount[nextPlayer] > 0){
    $$$$$:  983-block  0
branch  0 never executed
branch  1 never executed
    #####:  984:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  985:	  state->discardCount[nextPlayer]--;
    $$$$$:  985-block  0
unconditional  0 never executed
        -:  986:	}
        -:  987:	else{
        -:  988:	  //No Card to Reveal
        -:  989:	  if (DEBUG){
        -:  990:	    printf("No cards to reveal\n");
        -:  991:	  }
        -:  992:	}
        -:  993:      }
        -:  994:
        -:  995:      else{
    #####:  996:	if (state->deckCount[nextPlayer] == 0){
    $$$$$:  996-block  0
branch  0 never executed
branch  1 never executed
    #####:  997:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    $$$$$:  997-block  0
unconditional  0 never executed
    $$$$$:  997-block  1
unconditional  1 never executed
    $$$$$:  997-block  2
branch  2 never executed
branch  3 never executed
    #####:  998:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  999:	    state->deckCount[nextPlayer]++;
    #####: 1000:	    state->discard[nextPlayer][i] = -1;
    #####: 1001:	    state->discardCount[nextPlayer]--;
        -: 1002:	  }
        -: 1003:
    #####: 1004:	  shuffle(nextPlayer,state);//Shuffle the deck
    $$$$$: 1004-block  0
call    0 never executed
unconditional  1 never executed
        -: 1005:	}
    #####: 1006:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1007:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1008:	state->deckCount[nextPlayer]--;
    #####: 1009:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1010:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1011:	state->deckCount[nextPlayer]--;
    $$$$$: 1011-block  0
unconditional  0 never executed
        -: 1012:      }
        -: 1013:
    #####: 1014:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
    $$$$$: 1014-block  0
branch  0 never executed
branch  1 never executed
    #####: 1015:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1016:	state->playedCardCount++;
    #####: 1017:	tributeRevealedCards[1] = -1;
    $$$$$: 1017-block  0
unconditional  0 never executed
        -: 1018:      }
        -: 1019:
    #####: 1020:      for (i = 0; i <= 2; i ++){
    $$$$$: 1020-block  0
unconditional  0 never executed
    $$$$$: 1020-block  1
unconditional  1 never executed
    $$$$$: 1020-block  2
branch  2 never executed
branch  3 never executed
    #####: 1021:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    $$$$$: 1021-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1021-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 1021-block  2
branch  4 never executed
branch  5 never executed
    #####: 1022:	  state->coins += 2;
    $$$$$: 1022-block  0
unconditional  0 never executed
        -: 1023:	}
        -: 1024:
    #####: 1025:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    $$$$$: 1025-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1025-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 1025-block  2
branch  4 never executed
branch  5 never executed
    $$$$$: 1025-block  3
branch  6 never executed
branch  7 never executed
    $$$$$: 1025-block  4
branch  8 never executed
branch  9 never executed
    #####: 1026:	  drawCard(currentPlayer, state);
    $$$$$: 1026-block  0
call    0 never executed
    #####: 1027:	  drawCard(currentPlayer, state);
call    0 never executed
unconditional  1 never executed
        -: 1028:	}
        -: 1029:	else{//Action Card
    #####: 1030:	  state->numActions = state->numActions + 2;
    $$$$$: 1030-block  0
unconditional  0 never executed
        -: 1031:	}
        -: 1032:      }
        -: 1033:
    #####: 1034:      return 0;
    $$$$$: 1034-block  0
unconditional  0 never executed
        -: 1035:
        -: 1036:    case ambassador:
    #####: 1037:      j = 0;		//used to check if player has enough cards to discard
        -: 1038:
    #####: 1039:      if (choice2 > 2 || choice2 < 0)
    $$$$$: 1039-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1039-block  1
branch  2 never executed
branch  3 never executed
        -: 1040:	{
    #####: 1041:	  return -1;
    $$$$$: 1041-block  0
unconditional  0 never executed
        -: 1042:	}
        -: 1043:
    #####: 1044:      if (choice1 == handPos)
    $$$$$: 1044-block  0
branch  0 never executed
branch  1 never executed
        -: 1045:	{
    #####: 1046:	  return -1;
    $$$$$: 1046-block  0
unconditional  0 never executed
        -: 1047:	}
        -: 1048:
    #####: 1049:      for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$: 1049-block  0
unconditional  0 never executed
    $$$$$: 1049-block  1
unconditional  1 never executed
    $$$$$: 1049-block  2
branch  2 never executed
branch  3 never executed
        -: 1050:	{
    #####: 1051:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
    $$$$$: 1051-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1051-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 1051-block  2
branch  4 never executed
branch  5 never executed
        -: 1052:	    {
    #####: 1053:	      j++;
    $$$$$: 1053-block  0
unconditional  0 never executed
        -: 1054:	    }
        -: 1055:	}
    #####: 1056:      if (j < choice2)
    $$$$$: 1056-block  0
branch  0 never executed
branch  1 never executed
        -: 1057:	{
    #####: 1058:	  return -1;
    $$$$$: 1058-block  0
unconditional  0 never executed
        -: 1059:	}
        -: 1060:
        -: 1061:      if (DEBUG)
        -: 1062:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1063:
        -: 1064:      //increase supply count for choosen card by amount being discarded
    #####: 1065:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1066:
        -: 1067:      //each other player gains a copy of revealed card
    #####: 1068:      for (i = 0; i < state->numPlayers; i++)
    $$$$$: 1068-block  0
unconditional  0 never executed
    $$$$$: 1068-block  1
unconditional  1 never executed
    $$$$$: 1068-block  2
branch  2 never executed
branch  3 never executed
        -: 1069:	{
    #####: 1070:	  if (i != currentPlayer)
    $$$$$: 1070-block  0
branch  0 never executed
branch  1 never executed
        -: 1071:	    {
    #####: 1072:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    $$$$$: 1072-block  0
call    0 never executed
unconditional  1 never executed
        -: 1073:	    }
        -: 1074:	}
        -: 1075:
        -: 1076:      //discard played card from hand
    #####: 1077:      discardCard(handPos, currentPlayer, state, 0);
    $$$$$: 1077-block  0
call    0 never executed
        -: 1078:
        -: 1079:      //trash copies of cards returned to supply
    #####: 1080:      for (j = 0; j < choice2; j++)
unconditional  0 never executed
    $$$$$: 1080-block  0
unconditional  1 never executed
    $$$$$: 1080-block  1
branch  2 never executed
branch  3 never executed
        -: 1081:	{
    #####: 1082:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$: 1082-block  0
unconditional  0 never executed
    $$$$$: 1082-block  1
unconditional  1 never executed
    $$$$$: 1082-block  2
branch  2 never executed
branch  3 never executed
        -: 1083:	    {
    #####: 1084:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
    $$$$$: 1084-block  0
branch  0 never executed
branch  1 never executed
        -: 1085:		{
    #####: 1086:		  discardCard(i, currentPlayer, state, 1);
    $$$$$: 1086-block  0
call    0 never executed
    #####: 1087:		  break;
unconditional  0 never executed
        -: 1088:		}
        -: 1089:	    }
        -: 1090:	}
        -: 1091:
    #####: 1092:      return 0;
    $$$$$: 1092-block  0
unconditional  0 never executed
        -: 1093:
        -: 1094:    case cutpurse:
        -: 1095:
    #####: 1096:      updateCoins(currentPlayer, state, 2);
    $$$$$: 1096-block  0
call    0 never executed
    #####: 1097:      for (i = 0; i < state->numPlayers; i++)
unconditional  0 never executed
    $$$$$: 1097-block  0
unconditional  1 never executed
    $$$$$: 1097-block  1
branch  2 never executed
branch  3 never executed
        -: 1098:	{
    #####: 1099:	  if (i != currentPlayer)
    $$$$$: 1099-block  0
branch  0 never executed
branch  1 never executed
        -: 1100:	    {
    #####: 1101:	      for (j = 0; j < state->handCount[i]; j++)
    $$$$$: 1101-block  0
unconditional  0 never executed
    $$$$$: 1101-block  1
unconditional  1 never executed
    $$$$$: 1101-block  2
branch  2 never executed
branch  3 never executed
        -: 1102:		{
    #####: 1103:		  if (state->hand[i][j] == copper)
    $$$$$: 1103-block  0
branch  0 never executed
branch  1 never executed
        -: 1104:		    {
    #####: 1105:		      discardCard(j, i, state, 0);
    $$$$$: 1105-block  0
call    0 never executed
    #####: 1106:		      break;
unconditional  0 never executed
        -: 1107:		    }
    #####: 1108:		  if (j == state->handCount[i])
    $$$$$: 1108-block  0
branch  0 never executed
branch  1 never executed
        -: 1109:		    {
    #####: 1110:		      for (k = 0; k < state->handCount[i]; k++)
    $$$$$: 1110-block  0
unconditional  0 never executed
    $$$$$: 1110-block  1
unconditional  1 never executed
    $$$$$: 1110-block  2
branch  2 never executed
branch  3 never executed
        -: 1111:			{
        -: 1112:			  if (DEBUG)
        -: 1113:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1114:			}
    #####: 1115:		      break;
    $$$$$: 1115-block  0
unconditional  0 never executed
        -: 1116:		    }
        -: 1117:		}
        -: 1118:
        -: 1119:	    }
        -: 1120:
        -: 1121:	}
        -: 1122:
        -: 1123:      //discard played card from hand
    #####: 1124:      discardCard(handPos, currentPlayer, state, 0);
    $$$$$: 1124-block  0
call    0 never executed
        -: 1125:
    #####: 1126:      return 0;
unconditional  0 never executed
        -: 1127:
        -: 1128:    case embargo:
    #####: 1129:      return embargoEffect(currentPlayer, state, handPos, choice1);
    $$$$$: 1129-block  0
call    0 never executed
unconditional  1 never executed
        -: 1130:
        -: 1131:    case outpost:
        -: 1132:      //set outpost flag
    #####: 1133:      state->outpostPlayed++;
        -: 1134:
        -: 1135:      //discard card
    #####: 1136:      discardCard(handPos, currentPlayer, state, 0);
    $$$$$: 1136-block  0
call    0 never executed
    #####: 1137:      return 0;
unconditional  0 never executed
        -: 1138:
        -: 1139:    case salvager:
        -: 1140:      //+1 buy
    #####: 1141:      state->numBuys++;
        -: 1142:
    #####: 1143:      if (choice1)
    $$$$$: 1143-block  0
branch  0 never executed
branch  1 never executed
        -: 1144:	{
        -: 1145:	  //gain coins equal to trashed card
    #####: 1146:	  state->coins = state->coins + getCost( handCard(choice1, state) );
    $$$$$: 1146-block  0
call    0 never executed
call    1 never executed
        -: 1147:	  //trash card
    #####: 1148:	  discardCard(choice1, currentPlayer, state, 1);
call    0 never executed
unconditional  1 never executed
        -: 1149:	}
        -: 1150:
        -: 1151:      //discard card
    #####: 1152:      discardCard(handPos, currentPlayer, state, 0);
    $$$$$: 1152-block  0
call    0 never executed
    #####: 1153:      return 0;
unconditional  0 never executed
        -: 1154:
        -: 1155:    case sea_hag:
    #####: 1156:      sea_hagEffect(currentPlayer, state);
    $$$$$: 1156-block  0
call    0 never executed
    #####: 1157:      return 0;
unconditional  0 never executed
        -: 1158:
        -: 1159:  case treasure_map:
        -: 1160:    //search hand for another treasure_map
    #####: 1161:    index = -1;
    #####: 1162:    for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$: 1162-block  0
unconditional  0 never executed
    $$$$$: 1162-block  1
unconditional  1 never executed
    $$$$$: 1162-block  2
branch  2 never executed
branch  3 never executed
        -: 1163:  	{
    #####: 1164:  	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
    $$$$$: 1164-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1164-block  1
branch  2 never executed
branch  3 never executed
        -: 1165:  	    {
    #####: 1166:  	      index = i;
    #####: 1167:  	      break;
    $$$$$: 1167-block  0
unconditional  0 never executed
        -: 1168:  	    }
        -: 1169:  	}
        -: 1170:
    #####: 1171:    if (index > -1)
    $$$$$: 1171-block  0
branch  0 never executed
branch  1 never executed
        -: 1172:  	{
        -: 1173:  	  //trash both treasure cards
    #####: 1174:  	  discardCard(handPos, currentPlayer, state, 1);
    $$$$$: 1174-block  0
call    0 never executed
    #####: 1175:  	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1176:
        -: 1177:  	  //gain 4 Gold cards
    #####: 1178:  	  for (i = 0; i < 4; i++)
unconditional  0 never executed
unconditional  1 never executed
    $$$$$: 1178-block  0
branch  2 never executed
branch  3 never executed
        -: 1179:  	    {
    #####: 1180:  	      gainCard(gold, state, 1, currentPlayer);
    $$$$$: 1180-block  0
call    0 never executed
        -: 1181:  	    }
        -: 1182:
        -: 1183:  	  //return success
    #####: 1184:  	  return 1;
    $$$$$: 1184-block  0
unconditional  0 never executed
        -: 1185:  	 }
        -: 1186:
        -: 1187:    //no second treasure_map found in hand
    #####: 1188:    return -1;
    $$$$$: 1188-block  0
unconditional  0 never executed
        -: 1189:    }
        -: 1190:
    20014: 1191:  return -1;
    $$$$$: 1191-block  0
unconditional  0 never executed
    20014: 1191-block  1
unconditional  1 taken 20014
        -: 1192:}
        -: 1193:
function discardCard called 30025 returned 100% blocks executed 100%
    30025: 1194:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
    30025: 1194-block  0
        -: 1195:{
        -: 1196:
        -: 1197:  //if card is not trashed, added to Played pile
    30025: 1198:  if (trashFlag < 1)
    30025: 1198-block  0
branch  0 taken 30022 (fallthrough)
branch  1 taken 3
        -: 1199:    {
        -: 1200:      //add card to played pile
    30022: 1201:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
    30022: 1202:      state->playedCardCount++;
    30022: 1202-block  0
unconditional  0 taken 30022
        -: 1203:    }
        -: 1204:
        -: 1205:  //set played card to -1
    30025: 1206:  state->hand[currentPlayer][handPos] = -1;
        -: 1207:
        -: 1208:  //remove card from player's hand
    30025: 1209:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
    30025: 1209-block  0
branch  0 taken 6 (fallthrough)
branch  1 taken 30019
        -: 1210:    {
        -: 1211:      //reduce number of cards in hand
        6: 1212:      state->handCount[currentPlayer]--;
        6: 1212-block  0
unconditional  0 taken 6
        -: 1213:    }
    30019: 1214:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
    30019: 1214-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 30017
        -: 1215:    {
        -: 1216:      //reduce number of cards in hand
        2: 1217:      state->handCount[currentPlayer]--;
        2: 1217-block  0
unconditional  0 taken 2
        -: 1218:    }
        -: 1219:  else
        -: 1220:    {
        -: 1221:      //replace discarded card with last card in hand
    30017: 1222:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1223:      //set last card to -1
    30017: 1224:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1225:      //reduce number of cards in hand
    30017: 1226:      state->handCount[currentPlayer]--;
    30017: 1226-block  0
unconditional  0 taken 30017
        -: 1227:    }
        -: 1228:
    30025: 1229:  return 0;
    30025: 1229-block  0
unconditional  0 taken 30025
        -: 1230:}
        -: 1231:
function gainCard called 8 returned 100% blocks executed 100%
        8: 1232:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        8: 1232-block  0
        -: 1233:{
        -: 1234:  //Note: supplyPos is enum of choosen card
        -: 1235:
        -: 1236:  //check if supply pile is empty (0) or card is not used in game (-1)
        8: 1237:  if ( supplyCount(supplyPos, state) < 1 )
        8: 1237-block  0
call    0 returned 8
branch  1 taken 1 (fallthrough)
branch  2 taken 7
        -: 1238:    {
        1: 1239:      return -1;
        1: 1239-block  0
unconditional  0 taken 1
        -: 1240:    }
        -: 1241:
        -: 1242:  //added card for [whoseTurn] current player:
        -: 1243:  // toFlag = 0 : add to discard
        -: 1244:  // toFlag = 1 : add to deck
        -: 1245:  // toFlag = 2 : add to hand
        -: 1246:
        7: 1247:  if (toFlag == 1)
        7: 1247-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 6
        -: 1248:    {
        1: 1249:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
        1: 1250:      state->deckCount[player]++;
        1: 1250-block  0
unconditional  0 taken 1
        -: 1251:    }
        6: 1252:  else if (toFlag == 2)
        6: 1252-block  0
branch  0 taken 5 (fallthrough)
branch  1 taken 1
        -: 1253:    {
        5: 1254:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
        5: 1255:      state->handCount[player]++;
        5: 1255-block  0
unconditional  0 taken 5
        -: 1256:    }
        -: 1257:  else
        -: 1258:    {
        1: 1259:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        1: 1260:      state->discardCount[player]++;
        1: 1260-block  0
unconditional  0 taken 1
        -: 1261:    }
        -: 1262:
        -: 1263:  //decrease number in supply pile
        7: 1264:  state->supplyCount[supplyPos]--;
        -: 1265:
        7: 1266:  return 0;
        7: 1266-block  0
unconditional  0 taken 7
        -: 1267:}
        -: 1268:
function updateCoins called 44 returned 100% blocks executed 82%
       44: 1269:int updateCoins(int player, struct gameState *state, int bonus)
       44: 1269-block  0
        -: 1270:{
        -: 1271:  int i;
        -: 1272:
        -: 1273:  //reset coin count
       44: 1274:  state->coins = 0;
        -: 1275:
        -: 1276:  //add coins for each Treasure card in player's hand
      264: 1277:  for (i = 0; i < state->handCount[player]; i++)
       44: 1277-block  0
unconditional  0 taken 44
      220: 1277-block  1
unconditional  1 taken 220
      264: 1277-block  2
branch  2 taken 220
branch  3 taken 44 (fallthrough)
        -: 1278:    {
      220: 1279:      if (state->hand[player][i] == copper)
      220: 1279-block  0
branch  0 taken 176 (fallthrough)
branch  1 taken 44
        -: 1280:	{
      176: 1281:	  state->coins += 1;
      176: 1281-block  0
unconditional  0 taken 176
        -: 1282:	}
       44: 1283:      else if (state->hand[player][i] == silver)
       44: 1283-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 44
        -: 1284:	{
    #####: 1285:	  state->coins += 2;
    $$$$$: 1285-block  0
unconditional  0 never executed
        -: 1286:	}
       44: 1287:      else if (state->hand[player][i] == gold)
       44: 1287-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 44
        -: 1288:	{
    #####: 1289:	  state->coins += 3;
    $$$$$: 1289-block  0
unconditional  0 never executed
        -: 1290:	}
        -: 1291:    }
        -: 1292:
        -: 1293:  //add bonus
       44: 1294:  state->coins += bonus;
        -: 1295:
       44: 1296:  return 0;
       44: 1296-block  0
unconditional  0 taken 44
        -: 1297:}
        -: 1298:
        -: 1299://smithy refactored out of switch statement in cardEffect
function smithyEffect called 10001 returned 100% blocks executed 100%
    10001: 1300:void smithyEffect(int currentPlayer, struct gameState *state, int handPos)
    10001: 1300-block  0
        -: 1301:{
        -: 1302:  //+3 Cards
    10001: 1303:  int i = 0;
    50005: 1304:  for (i = 0; i <= 3; i++)
    10001: 1304-block  0
unconditional  0 taken 10001
unconditional  1 taken 40004
    50005: 1304-block  1
branch  2 taken 40004
branch  3 taken 10001 (fallthrough)
        -: 1305:  {
    40004: 1306:    drawCard(currentPlayer, state);
    40004: 1306-block  0
call    0 returned 40004
        -: 1307:  }
        -: 1308:
        -: 1309:  //discard card from hand
    10001: 1310:  discardCard(handPos, currentPlayer, state, 0);
    10001: 1310-block  0
call    0 returned 10001
    10001: 1311:}
        -: 1312:
        -: 1313://adventurer refactored out of switch statement in cardEffect
function adventurerEffect called 10003 returned 100% blocks executed 36%
    10003: 1314:void adventurerEffect(int currentPlayer, struct gameState *state, int cardDrawn, int drawnTreasure, int *temphand)
    10003: 1314-block  0
        -: 1315:{
    10003: 1316:  int z = 0;// this is the counter for the temp hand
    10003: 1317:  while(drawnTreasure)
    10003: 1317-block  0
unconditional  0 taken 10003
    10003: 1317-block  1
branch  1 taken 0
branch  2 taken 10003 (fallthrough)
        -: 1318:  {
    #####: 1319:    if (state->deckCount[currentPlayer] <1)
    $$$$$: 1319-block  0
branch  0 never executed
branch  1 never executed
        -: 1320:    {
        -: 1321:      //if the deck is empty we need to shuffle discard and add to deck
    #####: 1322:      shuffle(currentPlayer, state);
    $$$$$: 1322-block  0
call    0 never executed
unconditional  1 never executed
        -: 1323:    }
    #####: 1324:    drawCard(currentPlayer, state);
    $$$$$: 1324-block  0
call    0 never executed
    #####: 1325:    cardDrawn = state->hand[state->handCount[currentPlayer]-1][currentPlayer];//top card of hand is most recently drawn card.
    #####: 1326:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 never executed
branch  1 never executed
    $$$$$: 1326-block  0
branch  2 never executed
branch  3 never executed
    $$$$$: 1326-block  1
branch  4 never executed
branch  5 never executed
    #####: 1327:      drawnTreasure++;
    $$$$$: 1327-block  0
unconditional  0 never executed
        -: 1328:    else
        -: 1329:    {
    #####: 1330:      temphand[z]=cardDrawn;
    #####: 1331:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####: 1332:      z++;
    $$$$$: 1332-block  0
unconditional  0 never executed
        -: 1333:    }
        -: 1334:  }
        -: 1335:
    10003: 1336:  while(z-1>=0)
    10003: 1336-block  0
unconditional  0 taken 10003
    10003: 1336-block  1
branch  1 taken 0
branch  2 taken 10003 (fallthrough)
        -: 1337:  {
    #####: 1338:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z-1]; // discard all cards in play that have been drawn
    #####: 1339:    z = z-1;
    $$$$$: 1339-block  0
unconditional  0 never executed
        -: 1340:  }
    10003: 1341:}
        -: 1342:
        -: 1343://gardens refactored out of switch statement in cardEffect
function gardensEffect called 0 returned 0% blocks executed 0%
    #####: 1344:int gardensEffect()
    $$$$$: 1344-block  0
        -: 1345:{
    #####: 1346:  return -1;
    $$$$$: 1346-block  0
unconditional  0 never executed
        -: 1347:}
        -: 1348:
        -: 1349://tribute refactored out of switch statement in cardEffect
function embargoEffect called 0 returned 0% blocks executed 0%
    #####: 1350:int embargoEffect(int currentPlayer, struct gameState *state, int handPos, int choice1)
    $$$$$: 1350-block  0
        -: 1351:{
        -: 1352:  //+2 Coins
    #####: 1353:  state->coins = state->coins + 2;
        -: 1354:
        -: 1355:  //see if selected pile is in play
    #####: 1356:  if ( state->supplyCount[choice1] == -1 )
    $$$$$: 1356-block  0
branch  0 never executed
branch  1 never executed
        -: 1357:  {
    #####: 1358:    return 0;
    $$$$$: 1358-block  0
unconditional  0 never executed
        -: 1359:  }
        -: 1360:
        -: 1361:  //add embargo token to selected supply pile
    #####: 1362:  state->embargoTokens[choice1]++;
        -: 1363:
        -: 1364:  //trash card
    #####: 1365:  discardCard(handPos, currentPlayer, state, 1);
    $$$$$: 1365-block  0
call    0 never executed
    #####: 1366:  return -0;
unconditional  0 never executed
        -: 1367:
        -: 1368:}
        -: 1369:
        -: 1370://seahag refactored out of switch statement in cardEffect
function sea_hagEffect called 0 returned 0% blocks executed 0%
    #####: 1371:void sea_hagEffect(int currentPlayer, struct gameState *state)
    $$$$$: 1371-block  0
        -: 1372:{
    #####: 1373:  int i = 0;
    #####: 1374:  for (i = 0; i < state->numPlayers; i++)
    $$$$$: 1374-block  0
unconditional  0 never executed
    $$$$$: 1374-block  1
unconditional  1 never executed
    $$$$$: 1374-block  2
branch  2 never executed
branch  3 never executed
        -: 1375:  {
    #####: 1376:    if (i == currentPlayer)
    $$$$$: 1376-block  0
branch  0 never executed
branch  1 never executed
        -: 1377:    {
    #####: 1378:      state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1379:      state->discardCount[i]++;
    #####: 1380:      state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    $$$$$: 1380-block  0
unconditional  0 never executed
        -: 1381:    }
        -: 1382:  }
    #####: 1383:}
        -: 1384:
        -: 1385://end of dominion.c
